/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/announcements/departures/{from}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get departures from a station
         * @description Retrieves departure information for trains from a specific station
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter for delayed trains */
                    delayed?: boolean;
                    /** @description Filter for canceled trains */
                    canceled?: boolean;
                    /** @description Return JSON response instead of HTML */
                    json?: boolean;
                };
                header?: never;
                path: {
                    /** @description Station code or name */
                    from: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved departures */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Announcement"][];
                        "text/html": string;
                    };
                };
                /** @description Failed to fetch departures */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/announcements/train/{trainId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get announcements for a specific train
         * @description Retrieves all announcements and information for a specific train
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Train identifier/number */
                    trainId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved train announcements */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Announcement"][];
                    };
                };
                /** @description Failed to fetch announcements */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all train stations
         * @description Retrieves a list of all train stations in Sweden
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved all stations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Full station name */
                            locationName?: string;
                            /** @description Station code/signature */
                            locationSignature?: string;
                            geometry?: {
                                /** @description Geographic coordinates in WGS84 format */
                                WGS84?: string;
                            };
                            /** @description List of platform lines at this station */
                            platformLine?: string[];
                            /** @description Additional information about the station */
                            informationText?: string;
                            /** @description Short version of the station name */
                            shortLocationName?: string;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/train/position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get train positions
         * @description Retrieves current positions of all active trains
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved train positions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            train?: {
                                /** @description Operational train number */
                                operationalTrainNumber?: string;
                                /** @description Operational departure date */
                                operationalTrainDepartureDate?: string;
                                /** @description Journey plan number */
                                journeyPlanNumber?: string;
                                /** @description Journey plan departure date */
                                journeyPlanDepartureDate?: string;
                                /** @description Advertised train number */
                                advertisedTrainNumber?: string;
                            };
                            position?: {
                                /** @description Geographic coordinates in WGS84 format */
                                wgs84?: string;
                            };
                            status?: {
                                /** @description Whether the train is currently active */
                                active?: boolean;
                            };
                            /** @description Last modified timestamp */
                            modifiedTime?: string;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LocationInfo: {
            locationName?: string;
            priority?: number;
            order?: number;
        };
        InformationItem: {
            code?: string;
            description?: string;
        };
        Deviation: {
            code?: string;
            description?: string;
        };
        Announcement: {
            activityId?: string;
            /** @description Station code/signature */
            locationSignature?: string;
            /** @description Scheduled time at location */
            advertisedTimeAtLocation?: string;
            /** @description Estimated time at location */
            estimatedTimeAtLocation?: string;
            /** @description Train identifier */
            advertisedTrainIdent?: string;
            /** @description Destination locations */
            toLocation?: components["schemas"]["LocationInfo"][];
            /** @description Via locations */
            viaToLocation?: components["schemas"]["LocationInfo"][];
            /** @description Track/platform number */
            trackAtLocation?: string;
            /** @description Whether the train is canceled */
            canceled?: boolean;
            /** @description Train operator */
            operator?: string;
            /** @description Additional information */
            otherInformation?: components["schemas"]["InformationItem"][];
            /** @description Product information */
            productInformation?: components["schemas"]["InformationItem"][];
            /** @description Last modified timestamp */
            modifiedTime?: string;
            /** @description Deviation information */
            deviation?: components["schemas"]["Deviation"];
            /** @description Departure station name */
            fromName?: string;
            /** @description Destination station name */
            toName?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
